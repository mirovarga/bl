# - create windows binary
# - zip binaries
# - add LICENSE and README.md to zips
# - preserve exec flag on bl

name: Haskell CI

on:
  push:
  #   branches: [main]
  # pull_request:
  #   branches: [main]

jobs:
  # create_release:
  #   name: Create Github Release
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check out code
  #       uses: actions/checkout@v2

  #     - name: Create Release
  #       id: create_release
  #       uses: actions/create-release@v1.1.1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: ${{ github.ref }}
  #         release_name: Release ${{ github.ref }}
  #         draft: true
  #         prerelease: false

  #     - name: Output Release URL File
  #       run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt

  #     - name: Save Release URL File for publish
  #       uses: actions/upload-artifact@v1
  #       with:
  #         name: release_url
  #         path: release_url.txt

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-haskell@v1
        with:
          ghc-version: "8.10.3"
          cabal-version: "3.2"

      - name: Cache ~/.cabal/packages, ~/.cabal/store
        uses: actions/cache@v2
        with:
          path: |
            ~/.cabal/packages
            ~/.cabal/store
          # dist-newstyle
          key: ${{ runner.os }}-8.10.3

      - name: Install dependencies
        run:
          # cabal update
          cabal build --only-dependencies --enable-tests --enable-benchmarks

      # - name: Set tag name
      #   uses: olegtarasov/get-tag@v2
      #   id: tag
      #   with:
      #     tagRegex: "v(.*)"
      #     tagRegexGroup: 1

      - name: Build binary
        # env:
        # BINARY_PATH: ./dist/bl
        run:
          # mkdir dist
          cabal install --install-method=copy --overwrite-policy=always --installdir=.

      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "bl"
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ci-cd-test
      # - name: Load Release URL File from release job
      #   uses: actions/download-artifact@v1
      #   with:
      #     name: release_url
      # - name: Get Release File Name & Upload URL
      #   id: get_release_info
      #   run: |
      #     echo "::set-output name=upload_url::$(cat release_url/release_url.txt)"
      # - name: Upload Release Asset
      #   id: upload-release-asset
      #   uses: actions/upload-release-asset@v1.0.1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.get_release_info.outputs.upload_url }}
      #     asset_path: ./dist/bl
      #     asset_name: bl-${{ steps.tag.outputs.tag }}-${{ runner.os }}
      #     asset_content_type: application/octet-stream
